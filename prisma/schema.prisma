// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  username         String    @unique
  password         String
  name             String
  photo            String?
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  following        Follow[]  @relation("Following")
  followedBy       Follow[]  @relation("FollowedBy")
  Post             Post[]    @relation("Author")
  Like             Like[]    @relation("UserLikes")
  Comment          Comment[] @relation("UserComment")
}

model Follow {
  id         String   @id @default(uuid())
  follower   User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followerId String
  followed   User     @relation("FollowedBy", fields: [followedId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followedId String
  createdAt  DateTime
}

model Post {
  id        String    @id @default(uuid())
  text      String?
  images    String[]
  author    User      @relation("Author", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String
  createdAt DateTime
  updatedAt DateTime?
  Like      Like[]    @relation("PostLikes")
  Comment   Comment[] @relation("PostComment")
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  post      Post     @relation("PostLikes", fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String
  createdAt DateTime
}

model Comment {
  id        String    @id @default(uuid())
  text      String
  user      User      @relation("UserComment", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  post      Post      @relation("PostComment", fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String
  createdAt DateTime
  updatedAt DateTime?
}

model Message {
  id          String    @id @default(uuid())
  sender      User      @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId    String
  recipient   User      @relation("ReceivedMessages", fields: [recipientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipientId String
  text        String
  sentAt      DateTime
  readAt      DateTime?
}
